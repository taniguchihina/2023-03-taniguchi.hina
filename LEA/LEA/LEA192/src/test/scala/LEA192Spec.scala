import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.diagrams.Diagrams

class LEA192Spec extends AnyFlatSpec with Diagrams {

  val lea192 = new LEA192
  
  "rotl" should "8 tests" in {
    // left rotation
    assert(lea192.rotl(0x5f66dbf6,  4) === 0xf66dbf65)
    assert(lea192.rotl(0xa0ec1b11, 16) === 0x1b11a0ec)
    assert(lea192.rotl(0x7fc728e2, 10) === 0x1ca389ff)
    assert(lea192.rotl(0x9a35afec,  5) === 0x46b5fd93)
    assert(lea192.rotl(0x9a8da1c5,  7) === 0x46d0e2cd)
    assert(lea192.rotl(0x36367142, 12) === 0x67142363)
    assert(lea192.rotl(0x51685abf, 10) === 0xa16afd45)
    assert(lea192.rotl(0xcbd041bb, 22) === 0x6ef2f410)
  }
  
  "rotr" should "8 tests" in {
    // right rotation
    assert(lea192.rotr(0x95395fe6, 20) === 0x95fe6953)
    assert(lea192.rotr(0xf3b04aa5, 25) === 0xd82552f9)
    assert(lea192.rotr(0xb2817563, 30) === 0xca05d58e)
    assert(lea192.rotr(0xf79322b5, 20) === 0x322b5f79)
    assert(lea192.rotr(0xcecec4b5, 19) === 0xd896b9d9)
    assert(lea192.rotr(0xbc6fa4b8,  5) === 0xc5e37d25)
    assert(lea192.rotr(0x9e5bdeea, 10) === 0xbaa796f7)
    assert(lea192.rotr(0x69d6d22c, 11) === 0x458d3ada)
  }
  
  "generateRoundKeys" should "1 test" in {
    val key = Array(0x3c2d1e0f, 0x78695a4b, 0xb4a59687,0xf0e1d2c3,0xc3d2e1f0,0x8796a5b4)
    val rk: Array[Int] = lea192.generateRoundKeys(key)
    assert(rk(  0) === 0x003a0fd4)
    assert(rk(  1) === 0x02497010)
    assert(rk(  2) === 0x194f7db1)
    assert(rk(  3) === 0x090d0883)
    assert(rk(  4) === 0x2ff5805a)
    assert(rk(  5) === 0xc2580b27)
    assert(rk(  6) === 0x11fdcbb1)
    assert(rk(  7) === 0x9e98e0c8)
    assert(rk(  8) === 0x18b570cf)
    assert(rk(  9) === 0x9dc53a79)
    assert(rk( 10) === 0x5c145788)
    assert(rk( 11) === 0x9771b5e5)
    assert(rk( 12) === 0xf30f7bb5)
    assert(rk( 13) === 0x6d6628db)
    assert(rk( 14) === 0xb74e5dad)
    assert(rk( 15) === 0xa65e46d0)
    assert(rk( 16) === 0x6f44da96)
    assert(rk( 17) === 0xf643115f)
    assert(rk( 18) === 0x74120631)
    assert(rk( 19) === 0xdac9bd17)
    assert(rk( 20) === 0xcd1ecf34)
    assert(rk( 21) === 0x540f76f1)
    assert(rk( 22) === 0xaa1a5bdb)
    assert(rk( 23) === 0xfbafaae7)
    assert(rk( 24) === 0x13f8a031)
    assert(rk( 25) === 0x34f28728)
    assert(rk( 26) === 0x31fdb409)
    assert(rk( 27) === 0x0e31481b)
    assert(rk( 28) === 0xdf498117)
    assert(rk( 29) === 0xcf9371f1)
    assert(rk( 30) === 0x0967c312)
    assert(rk( 31) === 0xb3484ec8)
    assert(rk( 32) === 0x3aae5b3d)
    assert(rk( 33) === 0x5a9714a0)
    assert(rk( 34) === 0xb2d4dd5f)
    assert(rk( 35) === 0x3a1fcdf7)
    assert(rk( 36) === 0x0ac47404)
    assert(rk( 37) === 0x59e9e54d)
    assert(rk( 38) === 0xa60dc00a)
    assert(rk( 39) === 0x566139d3)
    assert(rk( 40) === 0x898dce4f)
    assert(rk( 41) === 0x582d72dd)
    assert(rk( 42) === 0x77f3ea4c)
    assert(rk( 43) === 0xe2a73c8d)
    assert(rk( 44) === 0xb8f1249a)
    assert(rk( 45) === 0x6a172700)
    assert(rk( 46) === 0xbc0e539c)
    assert(rk( 47) === 0x2e46fdbb)
    assert(rk( 48) === 0xb4e0e98a)
    assert(rk( 49) === 0x3d028c05)
    assert(rk( 50) === 0xb8d3a050)
    assert(rk( 51) === 0xdbd67bef)
    assert(rk( 52) === 0xdf675c7a)
    assert(rk( 53) === 0x99eefbb0)
    assert(rk( 54) === 0xe68584f6)
    assert(rk( 55) === 0xce31ef45)
    assert(rk( 56) === 0x96c105ac)
    assert(rk( 57) === 0x2a1be677)
    assert(rk( 58) === 0x9d72b8b0)
    assert(rk( 59) === 0x33cecc54)
    assert(rk( 60) === 0xc22ffd76)
    assert(rk( 61) === 0x1ab7167e)
    assert(rk( 62) === 0x42bb3060)
    assert(rk( 63) === 0x7da517f5)
    assert(rk( 64) === 0x4aa0e8d3)
    assert(rk( 65) === 0x0a070c3c)
    assert(rk( 66) === 0xe200a765)
    assert(rk( 67) === 0xc2be17b3)
    assert(rk( 68) === 0x7f22543f)
    assert(rk( 69) === 0x3e4eb7a1)
    assert(rk( 70) === 0xc992a6f4)
    assert(rk( 71) === 0xa783c823)
    assert(rk( 72) === 0xc13cc747)
    assert(rk( 73) === 0xffcc8185)
    assert(rk( 74) === 0x66514e9e)
    assert(rk( 75) === 0xe4ccc199)
    assert(rk( 76) === 0xcd5c766d)
    assert(rk( 77) === 0xa004f676)
    assert(rk( 78) === 0x1d3a1fa6)
    assert(rk( 79) === 0xd46894ec)
    assert(rk( 80) === 0xf49c33e6)
    assert(rk( 81) === 0x782fda7e)
    assert(rk( 82) === 0x1fe6346c)
    assert(rk( 83) === 0x0ffe981c)
    assert(rk( 84) === 0x78b97c3d)
    assert(rk( 85) === 0x956e8ee8)
    assert(rk( 86) === 0x49ab721c)
    assert(rk( 87) === 0x2672138a)
    assert(rk( 88) === 0x037ea242)
    assert(rk( 89) === 0xce5fe8a4)
    assert(rk( 90) === 0x225f7158)
    assert(rk( 91) === 0x32d83e3e)
    assert(rk( 92) === 0xe118f6aa)
    assert(rk( 93) === 0x1fb83751)
    assert(rk( 94) === 0x4d27715c)
    assert(rk( 95) === 0xed2fba4e)
    assert(rk( 96) === 0x8dfbc56d)
    assert(rk( 97) === 0xe0a907db)
    assert(rk( 98) === 0xe4af091c)
    assert(rk( 99) === 0x5e123225)
    assert(rk(100) === 0xd0e8d2e1)
    assert(rk(101) === 0xcc4501fb)
    assert(rk(102) === 0x8422a8f0)
    assert(rk(103) === 0x46a12f92)
    assert(rk(104) === 0x415152ad)
    assert(rk(105) === 0xf55417f5)
    assert(rk(106) === 0x38738248)
    assert(rk(107) === 0xc6e29ded)
    assert(rk(108) === 0x5723715e)
    assert(rk(109) === 0xabfa788c)
    assert(rk(110) === 0xc3646af7)
    assert(rk(111) === 0x64af9186)
    assert(rk(112) === 0x8fc855ec)
    assert(rk(113) === 0x2bc36989)
    assert(rk(114) === 0x5e6b28e3)
    assert(rk(115) === 0xe0f5f592)
    assert(rk(116) === 0xeb3dd108)
    assert(rk(117) === 0x0551012a)
    assert(rk(118) === 0x50e4221d)
    assert(rk(119) === 0x97e85c0f)
    assert(rk(120) === 0x4e258e14)
    assert(rk(121) === 0x92298f0b)
    assert(rk(122) === 0x771269c3)
    assert(rk(123) === 0x6f934254)
    assert(rk(124) === 0xc0933b6b)
    assert(rk(125) === 0x421159b8)
    assert(rk(126) === 0xd76953f4)
    assert(rk(127) === 0x6a3e36be)
    assert(rk(128) === 0x53b656fb)
    assert(rk(129) === 0x610c22e0)
    assert(rk(130) === 0x9f399330)
    assert(rk(131) === 0xacf7e7e9)
    assert(rk(132) === 0xfe0b573b)
    assert(rk(133) === 0xcbb73085)
    assert(rk(134) === 0x89ed67fc)
    assert(rk(135) === 0x77014cef)
    assert(rk(136) === 0xe1b8431f)
    assert(rk(137) === 0xba1b4105)
    assert(rk(138) === 0x06de3450)
    assert(rk(139) === 0xb3f5b2fe)
    assert(rk(140) === 0xdf1cec27)
    assert(rk(141) === 0xfb22bd10)
    assert(rk(142) === 0x8e3de6fe)
    assert(rk(143) === 0x3d4acd27)
    assert(rk(144) === 0xc5444873)
    assert(rk(145) === 0x5bec968b)
    assert(rk(146) === 0x8b2af393)
    assert(rk(147) === 0x11e2f6ca)
    assert(rk(148) === 0x9cb3694f)
    assert(rk(149) === 0x94c56b91)
    assert(rk(150) === 0x939a1a93)
    assert(rk(151) === 0x27f101bb)
    assert(rk(152) === 0x5381bae7)
    assert(rk(153) === 0x48ebd1b1)
    assert(rk(154) === 0xf6d5fca7)
    assert(rk(155) === 0x0ca24bbc)
    assert(rk(156) === 0x7b03490b)
    assert(rk(157) === 0xde00acfb)
    assert(rk(158) === 0xc7f8abfe)
    assert(rk(159) === 0x410a14c1)
    assert(rk(160) === 0xd37932a9)
    assert(rk(161) === 0x14029327)
    assert(rk(162) === 0xbd948525)
    assert(rk(163) === 0x2c75004d)
    assert(rk(164) === 0xc52486d5)
    assert(rk(165) === 0x0f07e2fa)
    assert(rk(166) === 0x1963e1fd)
    assert(rk(167) === 0x882719c3)
  }
  
  "encrypt" should "1 test" in {
    val key = Array(0x3c2d1e0f, 0x78695a4b, 0xb4a59687, 0xf0e1d2c3,0xc3d2e1f0,0x8796a5b4)
    val plaintext = Array(0x23222120, 0x27262524, 0x2b2a2928, 0x2f2e2d2c)
    val ciphertext = Array(0x325eb96f, 0x871bad5a, 0x35f5dc8c, 0xf2c67476)
    val c = lea192.encrypt(plaintext, key)
    assert(c(0) === ciphertext(0))
    assert(c(1) === ciphertext(1))
    assert(c(2) === ciphertext(2))
    assert(c(3) === ciphertext(3))            
  }
  
  "decrypt" should "1 test" in {
    val key = Array(0x3c2d1e0f, 0x78695a4b, 0xb4a59687, 0xf0e1d2c3,0xc3d2e1f0,0x8796a5b4)
    val plaintext = Array(0x23222120, 0x27262524, 0x2b2a2928, 0x2f2e2d2c)
    val ciphertext = Array(0x325eb96f, 0x871bad5a, 0x35f5dc8c, 0xf2c67476)
    val m = lea192.decrypt(ciphertext, key)
    assert(m(0) === plaintext(0))
    assert(m(1) === plaintext(1))
    assert(m(2) === plaintext(2))
    assert(m(3) === plaintext(3))            
  }
  
  
}

// end of file
