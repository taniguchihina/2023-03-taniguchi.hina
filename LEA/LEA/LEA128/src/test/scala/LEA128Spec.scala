import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.diagrams.Diagrams

class LEA128Spec extends AnyFlatSpec with Diagrams {

  def printExecTime(process: => Unit): Unit = {
      val start = System.currentTimeMillis
      process
      println("処理時間： " + (System.currentTimeMillis - start) + " ミリ秒")
    }

  printExecTime {

  val lea128 = new LEA128
  
  "rotl" should "8 tests" in {
    // left rotation
    assert(lea128.rotl(0x5f66dbf6,  4) === 0xf66dbf65)
    assert(lea128.rotl(0xa0ec1b11, 16) === 0x1b11a0ec)
    assert(lea128.rotl(0x7fc728e2, 10) === 0x1ca389ff)
    assert(lea128.rotl(0x9a35afec,  5) === 0x46b5fd93)
    assert(lea128.rotl(0x9a8da1c5,  7) === 0x46d0e2cd)
    assert(lea128.rotl(0x36367142, 12) === 0x67142363)
    assert(lea128.rotl(0x51685abf, 10) === 0xa16afd45)
    assert(lea128.rotl(0xcbd041bb, 22) === 0x6ef2f410)
  }
  
  "rotr" should "8 tests" in {
    // right rotation
    assert(lea128.rotr(0x95395fe6, 20) === 0x95fe6953)
    assert(lea128.rotr(0xf3b04aa5, 25) === 0xd82552f9)
    assert(lea128.rotr(0xb2817563, 30) === 0xca05d58e)
    assert(lea128.rotr(0xf79322b5, 20) === 0x322b5f79)
    assert(lea128.rotr(0xcecec4b5, 19) === 0xd896b9d9)
    assert(lea128.rotr(0xbc6fa4b8,  5) === 0xc5e37d25)
    assert(lea128.rotr(0x9e5bdeea, 10) === 0xbaa796f7)
    assert(lea128.rotr(0x69d6d22c, 11) === 0x458d3ada)
  }
  
  "generateRoundKeys" should "1 test" in {
    val key = Array(0x3c2d1e0f, 0x78695a4b, 0xb4a59687,0xf0e1d2c3)
    val rk: Array[Int] = lea128.generateRoundKeys(key)
    assert(rk(  0) === 0x003a0fd4)
    assert(rk(  1) === 0x02497010)
    assert(rk(  2) === 0x194f7db1)
    assert(rk(  3) === 0x02497010)
    assert(rk(  4) === 0x090d0883)
    assert(rk(  5) === 0x02497010)
    assert(rk(  6) === 0x11fdcbb1)
    assert(rk(  7) === 0x9e98e0c8)
    assert(rk(  8) === 0x18b570cf)
    assert(rk(  9) === 0x9e98e0c8)
    assert(rk( 10) === 0x9dc53a79)
    assert(rk( 11) === 0x9e98e0c8)
    assert(rk( 12) === 0xf30f7bb5)
    assert(rk( 13) === 0x6d6628db)
    assert(rk( 14) === 0xb74e5dad)
    assert(rk( 15) === 0x6d6628db)
    assert(rk( 16) === 0xa65e46d0)
    assert(rk( 17) === 0x6d6628db)
    assert(rk( 18) === 0x74120631)
    assert(rk( 19) === 0xdac9bd17)
    assert(rk( 20) === 0xcd1ecf34)
    assert(rk( 21) === 0xdac9bd17)
    assert(rk( 22) === 0x540f76f1)
    assert(rk( 23) === 0xdac9bd17)
    assert(rk( 24) === 0x662147db)
    assert(rk( 25) === 0xc637c47a)
    assert(rk( 26) === 0x46518932)
    assert(rk( 27) === 0xc637c47a)
    assert(rk( 28) === 0x23269260)
    assert(rk( 29) === 0xc637c47a)
    assert(rk( 30) === 0xe4dd5047)
    assert(rk( 31) === 0xf694285e)
    assert(rk( 32) === 0xe1c2951d)
    assert(rk( 33) === 0xf694285e)
    assert(rk( 34) === 0x8ca5242c)
    assert(rk( 35) === 0xf694285e)
    assert(rk( 36) === 0xbaf8e5ca)
    assert(rk( 37) === 0x3e936cd7)
    assert(rk( 38) === 0x0fc7e5b1)
    assert(rk( 39) === 0x3e936cd7)
    assert(rk( 40) === 0xf1c8fa8c)
    assert(rk( 41) === 0x3e936cd7)
    assert(rk( 42) === 0x5522b80c)
    assert(rk( 43) === 0xee22ca78)
    assert(rk( 44) === 0x8a6fa8b3)
    assert(rk( 45) === 0xee22ca78)
    assert(rk( 46) === 0x65637b74)
    assert(rk( 47) === 0xee22ca78)
    assert(rk( 48) === 0x8a19279e)
    assert(rk( 49) === 0x6fb40ffe)
    assert(rk( 50) === 0x85c5f092)
    assert(rk( 51) === 0x6fb40ffe)
    assert(rk( 52) === 0x92cc9f25)
    assert(rk( 53) === 0x6fb40ffe)
    assert(rk( 54) === 0x9dde584c)
    assert(rk( 55) === 0xcb00c87f)
    assert(rk( 56) === 0x4780ad66)
    assert(rk( 57) === 0xcb00c87f)
    assert(rk( 58) === 0xe61b5dcb)
    assert(rk( 59) === 0xcb00c87f)
    assert(rk( 60) === 0x4fa10466)
    assert(rk( 61) === 0xf728e276)
    assert(rk( 62) === 0xd255411b)
    assert(rk( 63) === 0xf728e276)
    assert(rk( 64) === 0x656839ad)
    assert(rk( 65) === 0xf728e276)
    assert(rk( 66) === 0x9250d058)
    assert(rk( 67) === 0x51bd501f)
    assert(rk( 68) === 0x1cb40dae)
    assert(rk( 69) === 0x51bd501f)
    assert(rk( 70) === 0x1abf218d)
    assert(rk( 71) === 0x51bd501f)
    assert(rk( 72) === 0x21dd192d)
    assert(rk( 73) === 0x77c644e2)
    assert(rk( 74) === 0xcabfaa45)
    assert(rk( 75) === 0x77c644e2)
    assert(rk( 76) === 0x681c207d)
    assert(rk( 77) === 0x77c644e2)
    assert(rk( 78) === 0xde7ac372)
    assert(rk( 79) === 0x9436afd0)
    assert(rk( 80) === 0x10331d80)
    assert(rk( 81) === 0x9436afd0)
    assert(rk( 82) === 0xf326fe98)
    assert(rk( 83) === 0x9436afd0)
    assert(rk( 84) === 0xfb3ac3d4)
    assert(rk( 85) === 0x93df660e)
    assert(rk( 86) === 0x2f65d8a3)
    assert(rk( 87) === 0x93df660e)
    assert(rk( 88) === 0xdf92e761)
    assert(rk( 89) === 0x93df660e)
    assert(rk( 90) === 0x27620087)
    assert(rk( 91) === 0x265ef76e)
    assert(rk( 92) === 0x4fb29864)
    assert(rk( 93) === 0x265ef76e)
    assert(rk( 94) === 0x2656ed1a)
    assert(rk( 95) === 0x265ef76e)
    assert(rk( 96) === 0x227b88ec)
    assert(rk( 97) === 0xd0b3fa6f)
    assert(rk( 98) === 0xc86a08fd)
    assert(rk( 99) === 0xd0b3fa6f)
    assert(rk(100) === 0xa864cba9)
    assert(rk(101) === 0xd0b3fa6f)
    assert(rk(102) === 0xf1002361)
    assert(rk(103) === 0xe5e85fc3)
    assert(rk(104) === 0x1f0b0408)
    assert(rk(105) === 0xe5e85fc3)
    assert(rk(106) === 0x488e7ac4)
    assert(rk(107) === 0xe5e85fc3)
    assert(rk(108) === 0xc65415d5)
    assert(rk(109) === 0x51e176b6)
    assert(rk(110) === 0xeca88bf9)
    assert(rk(111) === 0x51e176b6)
    assert(rk(112) === 0xedb89ece)
    assert(rk(113) === 0x51e176b6)
    assert(rk(114) === 0x9b6fb99c)
    assert(rk(115) === 0x0548254b)
    assert(rk(116) === 0x8de9f7c2)
    assert(rk(117) === 0x0548254b)
    assert(rk(118) === 0xb6b4d146)
    assert(rk(119) === 0x0548254b)
    assert(rk(120) === 0x7257f134)
    assert(rk(121) === 0x06051a42)
    assert(rk(122) === 0x36bcef01)
    assert(rk(123) === 0x06051a42)
    assert(rk(124) === 0xb649d524)
    assert(rk(125) === 0x06051a42)
    assert(rk(126) === 0xa540fb03)
    assert(rk(127) === 0x34b196e6)
    assert(rk(128) === 0xf7c80dad)
    assert(rk(129) === 0x34b196e6)
    assert(rk(130) === 0x71bc7dc4)
    assert(rk(131) === 0x34b196e6)
    assert(rk(132) === 0x8fbee745)
    assert(rk(133) === 0xcf744123)
    assert(rk(134) === 0x907c0a60)
    assert(rk(135) === 0xcf744123)
    assert(rk(136) === 0x8215ec35)
    assert(rk(137) === 0xcf744123)
    assert(rk(138) === 0x0bf6adba)
    assert(rk(139) === 0xdf69029d)
    assert(rk(140) === 0x5b72305a)
    assert(rk(141) === 0xdf69029d)
    assert(rk(142) === 0xcb47c19f)
    assert(rk(143) === 0xdf69029d)
  }
  
  "encrypt" should "1 test" in {
    val key = Array(0x3c2d1e0f, 0x78695a4b, 0xb4a59687, 0xf0e1d2c3)
    val plaintext = Array(0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c)
    val ciphertext = Array(0x354ec89f, 0x18c6c628, 0xa7c73255, 0xfd8b6404)
    val c = lea128.encrypt(plaintext, key)
    assert(c(0) === ciphertext(0))
    assert(c(1) === ciphertext(1))
    assert(c(2) === ciphertext(2))
    assert(c(3) === ciphertext(3))            
  }
  
  "decrypt" should "1 test" in {
    val key = Array(0x3c2d1e0f, 0x78695a4b, 0xb4a59687, 0xf0e1d2c3)
    val plaintext = Array(0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c)
    val ciphertext = Array(0x354ec89f, 0x18c6c628, 0xa7c73255, 0xfd8b6404)
    val m = lea128.decrypt(ciphertext, key)
    assert(m(0) === plaintext(0))
    assert(m(1) === plaintext(1))
    assert(m(2) === plaintext(2))
    assert(m(3) === plaintext(3))            
  }
  
  
}
}

// end of file
